# coding: UTF-8
# Name: 单元测试
# Author: LYC
# Created: 2014-04-03

import sys
import pytest
import calculator

@pytest.fixture
def Calculator_Eval():
    return Calculator_Xrun()

@pytest.fixture
def Calculator_Xrun():
    calc = calculator.Calculator()
    def _(exp):
        r, o, e = calc.xrun(exp)
        return r
    return _


def is_equal(a, b, *arg):
    return abs(a - b) < 0.1 ** 10

def test_simple_exp(Calculator_Eval):
    test = (
        ("2014-3-26", 1985),
        ("1991", 1991),

        ("rsin(1.952)", 0.9282174959159),
        ("rcos(3.8)", -0.7909677119144),
        ("rtan(2.6)", -0.6015966130898),
        ("rarcsin(0.84)", 0.9972832223718),
        ("rarccos(-0.8)", 2.4980915447965),
        ("-rarctan(0.8)", -0.6747409422236),

        ("sinh(0.8)-cosh(.4)*tanh(-1.8)", 1.9116718041662),

        ("-  log(8,  2)", -3),
        ("  ln(4)", 1.3862943611199),
        (" log10     (65535000)", 7.8164733037652),

        ("pow(11, 10)", 25937424601),
        ("fact(100)", 93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000),
        ("sqrt(122.5)", 11.0679718105893),
        ("cuberoot(1122.5)", 10.3927093873672),
        ("yroot(65539, 12.5)", 2.4283986616318),

        ("sum([84.3,.005,36,12,1.3,6.2])", 139.805),
        ("avg([5.56,1,541,3,411,.9,rsin(45)])", 137.6158433606477),
        ("var([12.5, 13, 18, 11.8, 2.3, 7])", 24.5422222222222),
        ("varp([9.0, 1.0, 1.0, 1.0, 0.0, 0.0, 4.0, 16.0])", 32.5714285714286),
        ("stdev([0.2, 0.7, .4,-.3,-.7])", 0.5003998401279),
        ("stdevp([999,888.7,777.2,-666.4,2])", 713.3585073439582),

        ("5*6+81/23mod 74*2^8", 931.5652173913044),
        ("2 * 3^2 + 2 / 3mod 2 - 1", 19),
        ("-.12345+54321*123/321^2mod(sum([-1+10^2*rsin(rcos(rtan(100))),rarcsin(-1+1-1),log(100,10)*log10(1000)/ln(exp(1)),cuberoot(sqrt(fact(10)*mod(5,3)))*yroot(5,2),avg([3,4,5,6]),sum([987,253])*var([1,11,111,1111])/stdev([123,321,456,654,789,987])]))", 64.71950571665647),
        ("5mod(mod(2,3mod(2.1)))", 0),
        ("fact(100)", 93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000),
        ("sum((([1,2,3,4,5,6,7]))) ", 28),
        ("1---5", -4),
        ("-rsin(-+2)", 0.90929742682568),
        ("+-+-+3 mod +-+5 mod -+-+ mod (-+2^ 8,6)", 3),
        ("-(+1)--(2+3)", 4),
        ("sin((-90))", -1),
        ("sin(-90)", -1),
        ("sum([-(+1)--(2+2),3])", 6),
        ("sum([-(+1--2)--(2),-3])", -4),
        ("sqrt(3)*log10(9)^2", 1.5771686884275),
        ("-(2mod 3^4)", -16),
        ("sum([-(-1)--(2+3),3])", 9),
        ("sum([-1--2,3])", 4),
        ("stdev([1,2,sin(90)])+2", 2.471404520791),
        ("-pow(-(1+2),2)+sum([+3mod 2,1])", -7),
        ("(1-2)*-(-2)", -2),
        ("-2*(2+2*2mod 3+4)", -20),
        ("-  1-+3/3*2^(-2+3)", -3),
        ("-1--0-+2+-3 mod 4^3*-3", 78),
        ("(1-2) --(2*3+1)", 6),
        ("1 mod 3 + mod(1,2)", 2),
        ("2mod 3", 2),
        ("2 mod mod(8,5)", 2),
        ("2mod mod(8,5)", 2),
        ('8 + 15 - 17 * 10 mod 11 ^ 12', -16999999999977),
        ('6 + 17 - 4 * 4 ^ 10 mod 18', 7),
        ('20 + 16 - 11 mod 4 * 14 ^ 14', -33336020476674012),
        ('17 + 20 - 18 mod 19 ^ 10 * 1', -3570467226587),
        ('6 + 9 - 10 ^ 9 * 17 mod 17', 15),
        ('19 + 16 - 3 ^ 6 mod 5 * 15', -25),
        ('16 + 10 * 10 - 19 mod 10 ^ 3', -613),
        ('13 + 8 * 7 - 12 ^ 7 mod 18', 69),
        ('5 + 12 * 10 mod 14 - 10 ^ 14', -99999999999875),
        ('20 + 16 * 2 mod 2 ^ 12 - 5', 15),
        ('12 + 16 * 19 ^ 18 - 3 mod 11', 1666037604766579864525465),
        ('11 + 6 * 15 ^ 20 mod 8 - 18', -1),
        ('4 + 2 mod 9 - 20 * 13 ^ 3', -43934),
        ('7 + 4 mod 8 - 8 ^ 6 * 17', -4456437),
        ('18 + 17 mod 8 * 11 - 2 ^ 4', 13),
        ('8 + 11 mod 6 * 15 ^ 14 - 7', 145964630126953126),
        ('9 + 16 mod 10 ^ 9 - 7 * 14', 10077607),
        ('1 + 15 mod 18 ^ 10 * 17 - 11', 9803056640615),
        ('19 + 8 ^ 1 - 9 * 16 mod 14', 9),
        ('5 + 7 ^ 2 - 9 mod 4 * 12', 42),
        ('4 + 1 ^ 7 * 6 - 4 mod 15', 6),
        ('8 + 20 ^ 2 * 6 mod 2 - 16', -8),
        ('9 + 7 ^ 7 mod 3 - 12 * 1', -2),
        ('14 + 13 ^ 20 mod 18 * 4 - 11', 31),
        ('20 - 16 + 10 * 20 mod 6 ^ 17', 1310724),
        ('15 - 14 + 2 * 12 ^ 4 mod 13', 3),
        ('5 - 6 + 14 mod 6 * 5 ^ 8', 781249),
        ('9 - 17 + 12 mod 20 ^ 5 * 7', 1741816),
        ('20 - 13 + 20 ^ 8 * 3 mod 13', 76800000007),
        ('14 - 6 + 18 ^ 10 mod 13 * 9', 116),
        ('3 - 10 * 18 + 16 mod 6 ^ 7', 16207),
        ('17 - 17 * 16 + 10 ^ 9 mod 3', -254),
        ('11 - 17 * 17 mod 2 + 14 ^ 4', 38410),
        ('3 - 19 * 16 mod 19 ^ 12 + 18', -5348024557502443),
        ('20 - 7 * 4 ^ 7 + 14 mod 12', -114666),
        ('2 - 8 * 14 ^ 2 mod 6 + 9', -21),
        ('20 - 17 mod 3 + 12 * 14 ^ 2', 2370),
        ('7 - 16 mod 6 + 4 ^ 16 * 7', 30064771075),
        ('5 - 5 mod 8 * 8 + 15 ^ 15', 437893890380859340),
        ('12 - 7 mod 2 * 12 ^ 13 + 6', -106993205379054),
        ('7 - 12 mod 19 ^ 18 + 11 * 2', -26623333280885243875),
        ('11 - 17 mod 18 ^ 19 * 12 + 18', -2868869228221815898165807),
        ('1 - 15 ^ 11 + 13 * 19 mod 17', -8649755859348),
        ('19 - 20 ^ 18 + 17 mod 2 * 18', -262143999999999999999963),
        ('9 - 4 ^ 5 * 11 + 15 mod 6', -11252),
        ('12 - 12 ^ 17 * 1 mod 7 + 9', -2218611106740436971),
        ('7 - 12 ^ 13 mod 18 + 20 * 13', 267),
        ('16 - 14 ^ 10 mod 3 * 20 + 16', 12),
        ('2 * 19 + 15 - 20 mod 9 ^ 11', -1995),
        ('10 * 1 + 12 - 2 ^ 3 mod 6', 20),
        ('20 * 20 + 12 mod 16 - 4 ^ 19', -274877906532),
        ('6 * 7 + 6 mod 17 ^ 5 - 13', 7805),
        ('3 * 12 + 15 ^ 4 - 19 mod 18', 50660),
        ('5 * 3 + 11 ^ 18 mod 16 - 11', 13),
        ('18 * 15 - 18 + 1 mod 12 ^ 16', 253),
        ('6 * 12 - 1 + 6 ^ 13 mod 15', 77),
        ('14 * 10 - 13 mod 3 + 14 ^ 9', 20661046923),
        ('10 * 4 - 6 mod 16 ^ 17 + 20', -16926659444676),
        ('2 * 13 - 10 ^ 1 + 1 mod 18', 17),
        ('16 * 10 - 11 ^ 11 mod 20 + 18', 167),
        ('3 * 14 mod 8 + 14 - 7 ^ 10', -282475217),
        ('14 * 9 mod 5 + 5 ^ 16 - 14', 152587890667),
        ('16 * 2 mod 20 - 4 + 16 ^ 15', 1152921504606847004),
        ('18 * 6 mod 19 - 6 ^ 7 + 5', -279823),
        ('19 * 12 mod 20 ^ 2 + 3 - 2', 2737),
        ('3 * 18 mod 13 ^ 8 - 17 + 20', 1171878),
        ('16 * 2 ^ 11 + 17 - 20 mod 3', 32783),
        ('10 * 5 ^ 11 + 1 mod 18 - 10', 488281241),
        ('20 * 12 ^ 10 - 2 + 10 mod 14', 1238347284488),
        ('15 * 20 ^ 14 - 3 mod 17 + 8', 24576000000000000005),
        ('3 * 9 ^ 18 mod 16 + 4 - 6', 1),
        ('6 * 7 ^ 20 mod 16 - 12 + 12', 6),
        ('12 mod 16 + 13 - 10 * 13 ^ 15', -511858930140907545),
        ('8 mod 4 + 10 - 9 ^ 17 * 11', -183448998696332249),
        ('17 mod 5 + 3 * 5 - 14 ^ 2', -179),
        ('3 mod 4 + 18 * 20 ^ 14 - 17', 29491199999999999986),
        ('12 mod 4 + 6 ^ 7 - 8 * 7', 279880),
        ('9 mod 15 + 19 ^ 7 * 20 - 1', 17877434788),
        ('3 mod 14 - 4 + 3 * 11 ^ 16', 137849189590716482),
        ('10 mod 13 - 5 + 4 ^ 15 * 17', 18253611013),
        ('15 mod 13 - 13 * 11 + 12 ^ 2', 3),
        ('18 mod 12 - 20 * 8 ^ 14 + 3', -87960930222071),
        ('10 mod 18 - 5 ^ 12 + 20 * 3', -244140555),
        ('20 mod 6 - 8 ^ 10 * 14 + 12', -15032385522),
        ('18 mod 20 * 10 + 5 - 12 ^ 3', -1543),
        ('15 mod 3 * 17 + 6 ^ 18 - 20', 101559956668396),
        ('6 mod 9 * 9 - 10 + 19 ^ 14', 799006685782884165),
        ('16 mod 8 * 20 - 11 ^ 18 + 14', -5559917313492231467),
        ('19 mod 4 * 1 ^ 17 + 14 - 7', 10),
        ('18 mod 16 * 4 ^ 2 - 8 + 7', 31),
        ('19 mod 19 ^ 19 + 17 - 4 * 16', -47),
        ('8 mod 10 ^ 8 + 5 * 1 - 7', 16777214),
        ('20 mod 16 ^ 5 - 5 + 15 * 11', 1184),
        ('18 mod 18 ^ 16 - 18 * 4 + 8', -64),
        ('8 mod 14 ^ 12 * 5 + 20 - 12', 343597383688),
        ('19 mod 10 ^ 13 * 2 - 11 + 13', 5083731656660),
        ('7 ^ 9 + 11 - 2 * 16 mod 6', 40353610),
        ('17 ^ 17 + 5 - 9 mod 16 * 1', 827240261886336764173),
        ('12 ^ 20 + 9 * 10 - 16 mod 2', 3833759992447475122266),
        ('7 ^ 2 + 5 * 5 mod 4 - 11', 43),
        ('4 ^ 12 + 14 mod 7 - 20 * 17', 16776876),
        ('6 ^ 15 + 15 mod 18 * 20 - 2', 470184984874),
        ('17 ^ 20 - 4 + 2 * 3 mod 20', 4064231406647572522401603),
        ('8 ^ 9 - 11 + 16 mod 17 * 15', 134217957),
        ('8 ^ 9 - 12 * 13 + 1 mod 4', 134217573),
        ('1 ^ 13 - 2 * 7 mod 19 + 8', -5),
        ('12 ^ 20 - 6 mod 13 + 6 * 10', 3833759992447475122230),
        ('13 ^ 18 - 17 mod 19 * 14 + 17', 112455406951957392908),
        ('18 ^ 15 * 10 + 11 - 12 mod 8', 67466406164774584327),
        ('17 ^ 11 * 14 + 8 mod 1 - 1', 479806548306861),
        ('8 ^ 4 * 12 - 10 + 2 mod 13', 49144),
        ('18 ^ 14 * 5 - 1 mod 11 + 19', 1874066837910405138),
        ('12 ^ 1 * 8 mod 5 + 1 - 15', 22),
        ('14 ^ 14 * 5 mod 2 - 5 + 14', 11112006825558025),
        ('7 ^ 17 mod 3 + 10 - 4 * 2', 3),
        ('13 ^ 4 mod 4 + 18 * 9 - 5', 158),
        ('15 ^ 5 mod 9 - 15 + 18 * 17', 291),
        ('18 ^ 3 mod 8 - 14 * 2 + 1', -27),
        ('5 ^ 15 mod 8 * 11 + 16 - 10', 61),
        ('4 ^ 4 mod 19 * 13 - 14 + 9', 112),
        ('2^3^2', 64),
    )

    assert is_equal(Calculator_Eval("pow($$e, 3.8)"), Calculator_Eval("$$e^3.8"))
    assert is_equal(Calculator_Eval("pow($$e, 3.8)"), Calculator_Eval("exp(3.8)"))
    assert is_equal(Calculator_Eval("mod($$pi, $$e)"), Calculator_Eval("$$pi mod $$e"))

    for e, r in test:
        assert is_equal(Calculator_Eval(e), r, e)

def test_mod_operator(Calculator_Eval):
    assert is_equal(Calculator_Eval(".4mod.5"), 0.4)
    assert is_equal(Calculator_Eval("4mod mod(5,3)"), 0)
    assert is_equal(Calculator_Eval("4 mod 5 mod 3"), 1)
    assert is_equal(Calculator_Eval("4 mod pow(2,3) mod 3"), 1)

def test_spcial_num(Calculator_Xrun):
    case = (
        ("-(5+1j)", -1j-5),
        ("5*7 mod 7 +5j", 5j),
        ("3*8/6j", -4j),
        ("(1-5j)+(1+5j)", 2),
        ("5j**2", -25),
        ("8*2j/2j", 8),

        ("0x7c+0x270+158+051", 957),
    )

    for e, r in case:
        assert is_equal(Calculator_Xrun(e), r, e)

def test_tuple(Calculator_Xrun):
    case = (
        ("(3,4)", "([3,4])"),
        ("$x:$$ans", "(3,4)"),
        ("log(3,4)", "log([3,4])"),
        ("log $x", "log(3,4)"),
        ("mod(3,4)", "mod([3,4])"),
        ("mod $x", "mod(3,4)"),
        ("pow(3,4)", "pow([3,4])"),
        ("pow $x", "pow(3,4)"),
        ("yroot(3,4)", "yroot([3,4])"),
        ("yroot $x", "yroot(3,4)"),
        ("avg(3,4)", "avg([3,4])"),
        ("avg $x", "avg(3,4)"),
        ("sum(3,4)", "sum([3,4])"),
        ("sum $x", "sum(3,4)"),
        ("var(3,4)", "var([3,4])"),
        ("var $x", "var(3,4)"),
        ("varp(3,4)", "varp([3,4])"),
        ("varp $x", "varp(3,4)"),
        ("stdev(3,4)", "stdev([3,4])"),
        ("stdev $x", "stdev(3,4)"),
        ("stdevp(3,4)", "stdevp([3,4])"),
        ("stdevp $x", "stdevp(3,4)"),
        ("$x:array(2)", "$$ans"),
        ("rsin 2", "rsin(2)"),
        ("rsin(2)", "rsin((2))"),
        ("rsin $x", "rsin($x)"),
        ("rcos(2)", "rcos((2))"),
        ("rcos $x", "rcos($x)"),
        ("rtan(2)", "rtan((2))"),
        ("rtan $x", "rtan($x)"),
        ("$x:0.2", "0.2"),
        ("rarcsin(0.2)", "rarcsin((0.2))"),
        ("rarcsin $x", "rarcsin($x)"),
        ("rarccos(0.2)", "rarccos((0.2))"),
        ("rarccos $x", "rarccos($x)"),
        ("rarctan(0.2)", "rarctan((0.2))"),
        ("rarctan $x", "rarctan($x)"),
        ("$x:2", "2"),
        ("sinh(2)", "sinh((2))"),
        ("sinh $x", "sinh($x)"),
        ("cosh(2)", "cosh((2))"),
        ("cosh $x", "cosh($x)"),
        ("tanh(2)", "tanh((2))"),
        ("tanh $x", "tanh($x)"),
        ("log10(2)", "log10((2))"),
        ("log10 $x", "log10($x)"),
        ("ln(2)", "ln((2))"),
        ("ln $x", "ln($x)"),
        ("eXp(2)", "exp((2))"),
        ("exp $x", "exp($x)"),
        ("fact(2)", "fact((2))"),
        ("fact $x", "fact($x)"),
        ("sqrt(2)", "sqrt((2))"),
        ("sqrt $x", "sqrt($x)"),
        ("cuberoot(2)", "cuberoot((2))"),
        ("cuberoot $x", "cuberoot($x)"),
        ("avg(2)", "avg((2))"),
        ("avg $x", "avg($x)"),
        ("sum(2)", "sum((2))"),
        ("sum $x", "sum($x)"),
        ("var(2)", "var((2))"),
        ("VAR $x", "var($x)"),
        ("varp(2)", "varp((2))"),
        ("varp $x", "varp($x)"),
        ("stdev(2)", "stdev((2))"),
        ("stdev $x", "stdev($x)"),
        ("stdevp(2)", "stdevp((2))"),
        ("stdevp $x", "stdevp($x)"),

        ("floor(1,2.2,3.8)", "(1,2,3)"),
        ("val(8.3,1.2+2j)", "(8, 1)"),

        ("(1,2)", "[1,2]"),
        ("$x:$$ans", "(1,2)"),
        ("(1,2, 3, 4)", "((1,2),3,4)"),
        ("$$ans", "((1,2),(3,4))"),
        ("(1,2, 3, 4, 5)", "((1,2),(3,(4, 5)))"),
        ("$$ans", "($x,(3,(4, 5)))"),
        ("$$ans", "(($x,3) + (4, 5))"),
        ("$$ans", "($x,3) + (4, 5)"),
    )

    for a,b in case:
        assert Calculator_Xrun(a) == Calculator_Xrun(b)

def test_equation(Calculator_Xrun):
    case = (
        ("2*($$-2)-3*(4*$$-1)=9*(1-$$) ", "2*$$-4-12*$$+3=9-9*$$"),
        ("$$", "-10"),
        ("11*$$+64-2*$$=100-9*$$ ", "18*$$=36"),
        ("$$", "2"),
        ("15-(8-5*$$)=7*$$+(4-3*$$)","15-8+5*$$=7*$$+4-3*$$"),
        ("$$", "-3"),
        ("3*($$-7)-2*[9-4*(2-$$)]=22 ","3*$$-21-2*(9-8+4*$$)=22"),
        ("3*$$-21-2-8*$$=22", "-5*$$=45"),
        ("$$", "-9"),
        ("2*($$-2)+2=$$+1 ","2*$$-4+2=$$+1"),
        ("$$", "3"),
        ("30*$$-10*(10-$$)=100  ","30*$$-100+10*$$=100"),
        ("$$", "5"),
        ("4*($$+2)=5*($$-2) ", "4*$$+8=5*$$-10"),
        ("$$", "18"),
        ("120-4*($$+5)=28", "120-4*$$-20=28"),
        ("$$", "18"),
        ("15*$$+854-65*$$=54 ","-50*$$=-800"),
        ("$$", "16"),
        ("3*($$-2)+1=$$-(2*$$-1) ", "3*$$-6+1=$$-2*$$+1"),
        ("$$", "3/2"),
        ("14.59+$$-25.31=0 ", "10.72"),
        ("$$", "10.72"),
        ("($$-6)*7=2*$$ -2", "7*$$-42=2*$$-2"),
        ("$$", "8"),
        ("3*$$+$$=18 ","4*$$=18"),
        ("$$", "9/2"),
        ("12.5-3*$$=6.5 ","3*$$=6"),
        ("$$", "2"),
        ("1.2*($$-0.6)=4.8","1.2*$$- .72=4.8"),
        ("$$", "4.6"),
        ("$$+12.5=3.5*$$ ", "2.5*$$=12.5"),
        ("$$", "5"),
        ("8*$$-22.8=1.2 ","8*$$=24"),
        ("$$", "3"),
        (" 2*$$=5*$$-3 ","3*$$=3"),
        ("$$", "1"),
        ("$$+5=8 ", "3"),
        ("$$", "3"),

        ("2 * 3^2 + $$ / 3 mod 2 - 1=19", "2"),
        ("-.12345+54321*$$/321^2mod(sum([-1+10^2*rsin(rcos(rtan(100))),rarcsin(-1+1-1),log(100,10)*log10(1000)/ln(exp(1)),cuberoot(sqrt(fact(10)*mod(5,3)))*yroot(5,2),avg([3,4,5,6]),sum([987,253])*var([1,11,111,1111])/stdev([123,321,456,654,789,987])])) = 64.71950571665647", "123"),
    )
    for a,b in case:
        assert is_equal(Calculator_Xrun(a), Calculator_Xrun(b))

def test_function(Calculator_Xrun):
    case1 = (
        ("#func:-.12345+$5*123/321^2mod(sum([-1+$1^2*rsin(rcos(rtan($1))),rarcsin(-1+1-1),log($3,$2)*log10($4)/ln(exp($1)),cuberoot(sqrt(fact($2)*mod(5,3)))*yroot(5,2),avg([3,4,5,6]),sum([987,253])*var([$1,11,111,1111])/stdev([123,321,456,654,789,987])]))", "#f:1+1"),
        ("$x:(1,10,100,1000,54321)", "(1,10,100,1000,54321)"),
        ("$func:$x", "$x"),
        ("#a:$1+$2", "#b:#a($2,$3)*$1"),
        ("#b(4,2,3)", "20"),
        ("#c:#c $0", "$$0"),
        ("#d:#a($1,$2)+#a($2,$3)", "$$0"),
        ("#d(1,2,3)", "8"),
    )
    for a,b in case1:
        assert Calculator_Xrun(a) == Calculator_Xrun(b)

    case2 = (
        ("#func (1,10,100,1000,54321)", "64.71950571665647"),
        ("$$ans", "#func ($x)"),
        ("$$ans", "#func $x"),
        ("$$ans", "#func $func"),
    )
    for a,b in case2:
        assert is_equal(Calculator_Xrun(a), Calculator_Xrun(b))

def test_trifunction(Calculator_Xrun):
    case1 = (
        ('0','0.000000'),
        ('5','0.087266'),
        ('10','0.174533'),
        ('15','0.261799'),
        ('20','0.349066'),
        ('25','0.436332'),
        ('30','0.523599'),
        ('35','0.610865'),
        ('40','0.698132'),
        ('45','0.785398'),
        ('50','0.872665'),
        ('55','0.959931'),
        ('60','1.047198'),
        ('65','1.134464'),
        ('70','1.221730'),
        ('75','1.308997'),
        ('80','1.396263'),
        ('85','1.483530'),
    )

    for a, r in case1:
        assert Calculator_Xrun("sin %s" % a) - Calculator_Xrun("rsin %s" % r) < 0.1 ** 3
        assert Calculator_Xrun("cos %s" % a) - Calculator_Xrun("rcos %s" % r) < 0.1 ** 3
        assert Calculator_Xrun("tan %s" % a) - Calculator_Xrun("rtan %s" % r) < 0.1 ** 3

    case2 = (
        ("rad arcsin 0.2588190451025", "rarcsin 0.2588190451025"),
        ("rad arctan 0.2679491924311", "rarctan 0.2679491924311"),
        ("rad arccos 0.7071067811865", "rarccos 0.7071067811865"),
    )

    for a, r in case2:
        assert is_equal(Calculator_Xrun(a), Calculator_Xrun(r))

def test_num(Calculator_Xrun):
    case = (
        ('0x37', 55),
        ('0x9', 9),
        ('0x43', 67),
        ('-0x20', -32),
        ('0x53', 83),
        ('0x6e', 110),
        ('-0x59', -89),
        ('0x6d', 109),
        ('0x5e', 94),
        ('-0x54', -84),

        ('0o135', 93),
        ('0o124', 84),
        ('0o53', 43),
        ('0o75', 61),
        ('0o2', 2),
        ('0o22', 18),
        ('-0o74', -60),
        ('0o47', 39),
        ('-0o132', -90),
        ('0o71', 57),

        ('3.54003347786j', 3.54003347786j),
        ('1.78069123784j', 1.78069123784j),
        ('43.7634164138j', 43.7634164138j),
        ('-3.29135101657j', (-0-3.29135101657j)),
        ('14.2451084277j', 14.2451084277j),
        ('-63.7099736851j', (-0-63.7099736851j)),
        ('-80.9081582437j', (-0-80.9081582437j)),
        ('-3.23992913202j', (-0-3.23992913202j)),
        ('7.20820543255j', 7.20820543255j),
        ('-35.9569198176j', (-0-35.9569198176j)),
    )

    for a, r in case:
        assert is_equal(Calculator_Xrun(a), r)

def test_complex(Calculator_Xrun):
    case = (
        ("zsqrt(-1)", 1j),
        ("zlog(-1)", 3.141592653589793j),
        ("zlog10(-$$pi)", (0.4971498726941338+1.3643763538418412j)),
        ("zln(-$$e)", (1+3.141592653589793j)),

        ("zsin($$pi/2j)", -2.3012989023072947j),
        ("zcos(-1j)", 1.5430806348152437),
        ("ztan(3.2j)", 0.9966823978396512j),
        ("zarcsin(2)", (1.5707963267948966+1.3169578969248166j)),
        ("zarccos(2)", -1.3169578969248166j),
        ("zarctan(-.5)", -0.4636476090008061),

        ("zsinh(-3j)", -0.1411200080598672j),
        ("zcosh(-0.5j)", 0.8775825618903728),
        (" ztanh(0.5j)", 0.5463024898437905j),

        (" real(1.2+0.5j)", 1.2),
        (" imag(5.8-0.5j)", -0.5),
    )

    for x, r in case:
        assert is_equal(Calculator_Xrun(x), r, x)

def test_array_operator(Calculator_Xrun):

    case = (
        ("$x:(1,2,3,4,5)", (1,2,3,4,5)),
        ("head $x", 1),
        ("tail $x", (2,3,4,5)),
        ("left $x", (1,2)),
        ("right $x", (3,4,5)),
    )

    for x, r in case:
        assert Calculator_Xrun(x) == r

def main():
    pytest.main("-x '%s'" % sys.argv[0])

if __name__ == '__main__':
    main()
